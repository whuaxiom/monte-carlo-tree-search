// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "states.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mcts {
class StateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<State>
     _instance;
} _State_default_instance_;
class SamplesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Samples>
     _instance;
} _Samples_default_instance_;

namespace protobuf_states_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, winner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, current_player_),
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Samples, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Samples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Samples, samples_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(State)},
  { 13, 19, sizeof(Samples)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Samples_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "states.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _State_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_State_default_instance_);_Samples_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Samples_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014states.proto\022\004mcts\"S\n\005State\022\r\n\005state\030\001"
      " \003(\001\022\023\n\013probability\030\002 \003(\001\022\016\n\006winner\030\003 \001("
      "\001\022\026\n\016current_player\030\004 \001(\005\"\'\n\007Samples\022\034\n\007"
      "samples\030\001 \003(\0132\013.mcts.State"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "states.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_states_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kStateFieldNumber;
const int State::kProbabilityFieldNumber;
const int State::kWinnerFieldNumber;
const int State::kCurrentPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_states_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcts.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      state_(from.state_),
      probability_(from.probability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&winner_, &from.winner_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_player_) -
    reinterpret_cast<char*>(&winner_)) + sizeof(current_player_));
  // @@protoc_insertion_point(copy_constructor:mcts.State)
}

void State::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&winner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_player_) -
      reinterpret_cast<char*>(&winner_)) + sizeof(current_player_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:mcts.State)
  SharedDtor();
}

void State::SharedDtor() {
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  protobuf_states_2eproto::InitDefaults();
  return *internal_default_instance();
}

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:mcts.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  probability_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&winner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_player_) -
        reinterpret_cast<char*>(&winner_)) + sizeof(current_player_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcts.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_state())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_probability())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_probability())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double winner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_player = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_current_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcts.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcts.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcts.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double state = 1;
  for (int i = 0, n = this->state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->state(i), output);
  }

  // repeated double probability = 2;
  for (int i = 0, n = this->probability_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->probability(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double winner = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->winner(), output);
  }

  // optional int32 current_player = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcts.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mcts.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double state = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->state_, target);

  // repeated double probability = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->probability_, target);

  cached_has_bits = _has_bits_[0];
  // optional double winner = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->winner(), target);
  }

  // optional int32 current_player = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcts.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcts.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double state = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->state_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->state_size());
    total_size += data_size;
  }

  // repeated double probability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->probability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->probability_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double winner = 3;
    if (has_winner()) {
      total_size += 1 + 8;
    }

    // optional int32 current_player = 4;
    if (has_current_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_player());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcts.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcts.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcts.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcts.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  probability_.MergeFrom(from.probability_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      winner_ = from.winner_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_player_ = from.current_player_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcts.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcts.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  state_.InternalSwap(&other->state_);
  probability_.InternalSwap(&other->probability_);
  swap(winner_, other->winner_);
  swap(current_player_, other->current_player_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// repeated double state = 1;
int State::state_size() const {
  return state_.size();
}
void State::clear_state() {
  state_.Clear();
}
double State::state(int index) const {
  // @@protoc_insertion_point(field_get:mcts.State.state)
  return state_.Get(index);
}
void State::set_state(int index, double value) {
  state_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcts.State.state)
}
void State::add_state(double value) {
  state_.Add(value);
  // @@protoc_insertion_point(field_add:mcts.State.state)
}
const ::google::protobuf::RepeatedField< double >&
State::state() const {
  // @@protoc_insertion_point(field_list:mcts.State.state)
  return state_;
}
::google::protobuf::RepeatedField< double >*
State::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:mcts.State.state)
  return &state_;
}

// repeated double probability = 2;
int State::probability_size() const {
  return probability_.size();
}
void State::clear_probability() {
  probability_.Clear();
}
double State::probability(int index) const {
  // @@protoc_insertion_point(field_get:mcts.State.probability)
  return probability_.Get(index);
}
void State::set_probability(int index, double value) {
  probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcts.State.probability)
}
void State::add_probability(double value) {
  probability_.Add(value);
  // @@protoc_insertion_point(field_add:mcts.State.probability)
}
const ::google::protobuf::RepeatedField< double >&
State::probability() const {
  // @@protoc_insertion_point(field_list:mcts.State.probability)
  return probability_;
}
::google::protobuf::RepeatedField< double >*
State::mutable_probability() {
  // @@protoc_insertion_point(field_mutable_list:mcts.State.probability)
  return &probability_;
}

// optional double winner = 3;
bool State::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void State::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
void State::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
void State::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
double State::winner() const {
  // @@protoc_insertion_point(field_get:mcts.State.winner)
  return winner_;
}
void State::set_winner(double value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:mcts.State.winner)
}

// optional int32 current_player = 4;
bool State::has_current_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void State::set_has_current_player() {
  _has_bits_[0] |= 0x00000002u;
}
void State::clear_has_current_player() {
  _has_bits_[0] &= ~0x00000002u;
}
void State::clear_current_player() {
  current_player_ = 0;
  clear_has_current_player();
}
::google::protobuf::int32 State::current_player() const {
  // @@protoc_insertion_point(field_get:mcts.State.current_player)
  return current_player_;
}
void State::set_current_player(::google::protobuf::int32 value) {
  set_has_current_player();
  current_player_ = value;
  // @@protoc_insertion_point(field_set:mcts.State.current_player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Samples::kSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Samples::Samples()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_states_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mcts.Samples)
}
Samples::Samples(const Samples& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcts.Samples)
}

void Samples::SharedCtor() {
  _cached_size_ = 0;
}

Samples::~Samples() {
  // @@protoc_insertion_point(destructor:mcts.Samples)
  SharedDtor();
}

void Samples::SharedDtor() {
}

void Samples::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Samples::descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Samples& Samples::default_instance() {
  protobuf_states_2eproto::InitDefaults();
  return *internal_default_instance();
}

Samples* Samples::New(::google::protobuf::Arena* arena) const {
  Samples* n = new Samples;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Samples::Clear() {
// @@protoc_insertion_point(message_clear_start:mcts.Samples)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Samples::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mcts.Samples)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mcts.State samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mcts.Samples)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mcts.Samples)
  return false;
#undef DO_
}

void Samples::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mcts.Samples)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcts.State samples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->samples(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mcts.Samples)
}

::google::protobuf::uint8* Samples::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mcts.Samples)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcts.State samples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->samples(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcts.Samples)
  return target;
}

size_t Samples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcts.Samples)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mcts.State samples = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->samples(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Samples::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mcts.Samples)
  GOOGLE_DCHECK_NE(&from, this);
  const Samples* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Samples>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mcts.Samples)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mcts.Samples)
    MergeFrom(*source);
  }
}

void Samples::MergeFrom(const Samples& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcts.Samples)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
}

void Samples::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mcts.Samples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Samples::CopyFrom(const Samples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcts.Samples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Samples::IsInitialized() const {
  return true;
}

void Samples::Swap(Samples* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Samples::InternalSwap(Samples* other) {
  using std::swap;
  samples_.InternalSwap(&other->samples_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Samples::GetMetadata() const {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Samples

// repeated .mcts.State samples = 1;
int Samples::samples_size() const {
  return samples_.size();
}
void Samples::clear_samples() {
  samples_.Clear();
}
const ::mcts::State& Samples::samples(int index) const {
  // @@protoc_insertion_point(field_get:mcts.Samples.samples)
  return samples_.Get(index);
}
::mcts::State* Samples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:mcts.Samples.samples)
  return samples_.Mutable(index);
}
::mcts::State* Samples::add_samples() {
  // @@protoc_insertion_point(field_add:mcts.Samples.samples)
  return samples_.Add();
}
::google::protobuf::RepeatedPtrField< ::mcts::State >*
Samples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:mcts.Samples.samples)
  return &samples_;
}
const ::google::protobuf::RepeatedPtrField< ::mcts::State >&
Samples::samples() const {
  // @@protoc_insertion_point(field_list:mcts.Samples.samples)
  return samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mcts

// @@protoc_insertion_point(global_scope)
