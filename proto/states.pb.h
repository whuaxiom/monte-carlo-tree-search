// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#ifndef PROTOBUF_states_2eproto__INCLUDED
#define PROTOBUF_states_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mcts {
class Samples;
class SamplesDefaultTypeInternal;
extern SamplesDefaultTypeInternal _Samples_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace mcts

namespace mcts {

namespace protobuf_states_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_states_2eproto

// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mcts.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const PROTOBUF_FINAL { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double state = 1;
  int state_size() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  double state(int index) const;
  void set_state(int index, double value);
  void add_state(double value);
  const ::google::protobuf::RepeatedField< double >&
      state() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_state();

  // repeated double probability = 2;
  int probability_size() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 2;
  double probability(int index) const;
  void set_probability(int index, double value);
  void add_probability(double value);
  const ::google::protobuf::RepeatedField< double >&
      probability() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_probability();

  // optional double winner = 3;
  bool has_winner() const;
  void clear_winner();
  static const int kWinnerFieldNumber = 3;
  double winner() const;
  void set_winner(double value);

  // optional int32 current_player = 4;
  bool has_current_player() const;
  void clear_current_player();
  static const int kCurrentPlayerFieldNumber = 4;
  ::google::protobuf::int32 current_player() const;
  void set_current_player(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mcts.State)
 private:
  void set_has_winner();
  void clear_has_winner();
  void set_has_current_player();
  void clear_has_current_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > state_;
  ::google::protobuf::RepeatedField< double > probability_;
  double winner_;
  ::google::protobuf::int32 current_player_;
  friend struct protobuf_states_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Samples : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mcts.Samples) */ {
 public:
  Samples();
  virtual ~Samples();

  Samples(const Samples& from);

  inline Samples& operator=(const Samples& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Samples(Samples&& from) noexcept
    : Samples() {
    *this = ::std::move(from);
  }

  inline Samples& operator=(Samples&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Samples& default_instance();

  static inline const Samples* internal_default_instance() {
    return reinterpret_cast<const Samples*>(
               &_Samples_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Samples* other);
  friend void swap(Samples& a, Samples& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Samples* New() const PROTOBUF_FINAL { return New(NULL); }

  Samples* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Samples& from);
  void MergeFrom(const Samples& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Samples* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mcts.State samples = 1;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 1;
  const ::mcts::State& samples(int index) const;
  ::mcts::State* mutable_samples(int index);
  ::mcts::State* add_samples();
  ::google::protobuf::RepeatedPtrField< ::mcts::State >*
      mutable_samples();
  const ::google::protobuf::RepeatedPtrField< ::mcts::State >&
      samples() const;

  // @@protoc_insertion_point(class_scope:mcts.Samples)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mcts::State > samples_;
  friend struct protobuf_states_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// repeated double state = 1;
inline int State::state_size() const {
  return state_.size();
}
inline void State::clear_state() {
  state_.Clear();
}
inline double State::state(int index) const {
  // @@protoc_insertion_point(field_get:mcts.State.state)
  return state_.Get(index);
}
inline void State::set_state(int index, double value) {
  state_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcts.State.state)
}
inline void State::add_state(double value) {
  state_.Add(value);
  // @@protoc_insertion_point(field_add:mcts.State.state)
}
inline const ::google::protobuf::RepeatedField< double >&
State::state() const {
  // @@protoc_insertion_point(field_list:mcts.State.state)
  return state_;
}
inline ::google::protobuf::RepeatedField< double >*
State::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:mcts.State.state)
  return &state_;
}

// repeated double probability = 2;
inline int State::probability_size() const {
  return probability_.size();
}
inline void State::clear_probability() {
  probability_.Clear();
}
inline double State::probability(int index) const {
  // @@protoc_insertion_point(field_get:mcts.State.probability)
  return probability_.Get(index);
}
inline void State::set_probability(int index, double value) {
  probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:mcts.State.probability)
}
inline void State::add_probability(double value) {
  probability_.Add(value);
  // @@protoc_insertion_point(field_add:mcts.State.probability)
}
inline const ::google::protobuf::RepeatedField< double >&
State::probability() const {
  // @@protoc_insertion_point(field_list:mcts.State.probability)
  return probability_;
}
inline ::google::protobuf::RepeatedField< double >*
State::mutable_probability() {
  // @@protoc_insertion_point(field_mutable_list:mcts.State.probability)
  return &probability_;
}

// optional double winner = 3;
inline bool State::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void State::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void State::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline double State::winner() const {
  // @@protoc_insertion_point(field_get:mcts.State.winner)
  return winner_;
}
inline void State::set_winner(double value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:mcts.State.winner)
}

// optional int32 current_player = 4;
inline bool State::has_current_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::set_has_current_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void State::clear_has_current_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void State::clear_current_player() {
  current_player_ = 0;
  clear_has_current_player();
}
inline ::google::protobuf::int32 State::current_player() const {
  // @@protoc_insertion_point(field_get:mcts.State.current_player)
  return current_player_;
}
inline void State::set_current_player(::google::protobuf::int32 value) {
  set_has_current_player();
  current_player_ = value;
  // @@protoc_insertion_point(field_set:mcts.State.current_player)
}

// -------------------------------------------------------------------

// Samples

// repeated .mcts.State samples = 1;
inline int Samples::samples_size() const {
  return samples_.size();
}
inline void Samples::clear_samples() {
  samples_.Clear();
}
inline const ::mcts::State& Samples::samples(int index) const {
  // @@protoc_insertion_point(field_get:mcts.Samples.samples)
  return samples_.Get(index);
}
inline ::mcts::State* Samples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:mcts.Samples.samples)
  return samples_.Mutable(index);
}
inline ::mcts::State* Samples::add_samples() {
  // @@protoc_insertion_point(field_add:mcts.Samples.samples)
  return samples_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mcts::State >*
Samples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:mcts.Samples.samples)
  return &samples_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mcts::State >&
Samples::samples() const {
  // @@protoc_insertion_point(field_list:mcts.Samples.samples)
  return samples_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace mcts

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_states_2eproto__INCLUDED
